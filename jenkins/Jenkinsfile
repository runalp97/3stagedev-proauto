pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/runalp97/3stagedev-proauto.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t flaskapp:latest ./app'
            }
        }

        stage('Load to KinD') {
            steps {
                sh 'kind load docker-image flaskapp:latest --name devpro-auto'
            }
        }

        stage('Deploy to Dev') {
            steps {
                sh 'kubectl apply -n default -f k8s/dev/'
            }
        }

        stage('Approval for Test') {
            steps {
                input "Deploy to Test?"
            }
        }

        stage('Deploy to Test') {
            steps {
                sh 'kubectl apply -n default -f k8s/test/'
            }
        }

        stage('Run Tests in Test Environment') {
            steps {
                script {
                    sh """
                    echo "Waiting for test deployment to be ready..."
                    kubectl rollout status deployment/flask-app-test -n default --timeout=60s
                    """

                    sh """
                    echo "Running test inside cluster..."
                    kubectl run curl-test --rm -i --tty --image=curlimages/curl --restart=Never -- \
                      curl -s http://flask-test-browser.default.svc.cluster.local | grep -q "Hello" && echo "Test passed!" || (echo "Test failed!" && exit 1)
                    """
                }
            }
        }

        stage('Approval for Prod') {
            steps {
                input "Deploy to Prod?"
            }
        }

        stage('Deploy to Prod') {
            steps {
                sh 'kubectl apply -n default -f k8s/prod/'
                sh 'kubectl apply -n default -f k8s/prod/hpa.yaml'
                sh 'kubectl rollout status deployment/flask-app-prod -n default --timeout=60s'
            }
        }

        stage('Test Prod Deployment') {
            steps {
                script {
                    sh """
                    kubectl run curl-prod-test --rm -i --tty --image=curlimages/curl --restart=Never -- \
                      curl -s http://flask-prod-browser.default.svc.cluster.local | grep -q "Hello" && echo "Prod Test Passed!" || (echo "Prod Test Failed!" && exit 1)
                    """
                }
            }
        }

        stage('Install/Update Monitoring') {
            steps {
                sh 'ansible-playbook ansible/install_monitoring.yml'
            }
        }
    }

    post {
        always {
            input message: "Do you want to cleanup everything?", ok: "Yes, cleanup"
            sh '''
            # Delete Dev/Test/Prod deployments and services
            kubectl delete -f k8s/dev/ -n default --ignore-not-found
            kubectl delete -f k8s/test/ -n default --ignore-not-found
            kubectl delete -f k8s/prod/ -n default --ignore-not-found

            # Delete Prometheus
            kubectl delete deployment prometheus --ignore-not-found -n default
            kubectl delete service prometheus --ignore-not-found -n default

            # Delete Grafana
            kubectl delete deployment grafana --ignore-not-found -n default
            kubectl delete service grafana --ignore-not-found -n default
            '''
        }
    }
}
